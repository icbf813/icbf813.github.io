{"closure_14":{"link_diff":"https://github.com/google/closure-compiler/compare/b7c2861bf45b358b26ebc5ee1be9b6ce96bec78a..4b15b25f400335b6e2820cb690430324748372f9","language":"java","hunk":"diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9c08..980deff1df6 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,7 @@ private static Node computeFollowNode(\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n"},"closure_62":{"link_diff":"https://github.com/google/closure-compiler/compare/1e07047234938543ea364f68ec0f29686dbc12f1..b12d1d6489329c989b15635f6f7f06681b3f6582","language":"java","hunk":"diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex f529b7d0624..420dbc07d70 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -92,8 +92,10 @@ private String format(JSError error, boolean warning) {\n       int charno = error.getCharno();\n \n       // padding equal to the excerpt and arrow at the end\n+      // charno == sourceExpert.length() means something is missing\n+      // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+          && 0 <= charno && charno <= sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {"},"closure_70":{"link_diff":"https://github.com/google/closure-compiler/compare/7433d30ac4cb2334d22e66299846118686efe939..ec4a34c2bd87ba54fa8770affdeeea4f3c42089b","language":"java","hunk":"diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e1cd..aa7e2458f8f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1742,7 +1742,7 @@ private void declareArguments(Node functionNode) {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n+                  jsDocParameter.getJSType(), false);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);"},"closure_73":{"link_diff":"https://github.com/google/closure-compiler/compare/760bded3242093d86611a82e81fdca302a1487f1..ee8344091722c28c9351e78dcb4155fbfddfd1af","language":"java","hunk":"diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe1e8..823d897a23e 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,7 @@ static String strEscape(String s, char quote,\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+            if (c > 0x1f && c < 0x7f) {\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,"},"closure_86":{"link_diff":"https://github.com/google/closure-compiler/compare/5cd9c1efe90dc7c1be33cd7f8c1dcbaa9225909e..0907b6618a60b2de23c8f7ec2217a37dc5e9a091","language":"java","hunk":"diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 5262f2d6a03..9049aae77c3 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2459,7 +2459,10 @@ static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n             || isToStringMethodCall(value)\n             || locals.apply(value);\n       case Token.NEW:\n-        return true;\n+        // TODO(nicksantos): This needs to be changed so that it\n+        // returns true iff we're sure the value was never aliased from inside\n+        // the constructor (similar to callHasLocalResult)\n+        return false;\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:"},"closure_92":{"link_diff":"https://github.com/google/closure-compiler/compare/39dde4ca5df6263d7058029e081a710d7fa13de9..8980b60033b1c6853cbca593ec89d3d332adf7dc748372f9","language":"java","hunk":"diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363741..1d738b524dd 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,7 @@ void replace() {\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+          int indexOfDot = namespace.lastIndexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)\n"},"codec_7":{"link_diff":"https://github.com/apache/commons-codec/compare/f7966c1b374ebdd3fccb28370d9cb80a2115d807..954d995c5603b616c3c4a9ffb1823f36dd7ebcb0","language":"java","hunk":"diff --git a/src/java/org/apache/commons/codec/binary/Base64.java b/src/java/org/apache/commons/codec/binary/Base64.java\nindex 19a695947e..a5c44ab300 100644\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n@@ -667,7 +667,7 @@ public static byte[] encodeBase64(byte[] binaryData) {\n      * @since 1.4\n      */    \n     public static String encodeBase64String(byte[] binaryData) {\n-        return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n+        return StringUtils.newStringUtf8(encodeBase64(binaryData, false));\n     }\n     \n     /**"},"compress_19":{"link_diff":"https://github.com/apache/commons-compress/compare/ed534048b12afcffd45a53f7b0945f49d929a29a..e860d2f3eb16d84e146a8a700d9dbd3af01df4ba","language":"java","hunk":"diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java\nindex 1e0013fdac2..fbcec4843e2 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java\n@@ -242,7 +242,7 @@ public void parseFromCentralDirectoryData(byte[] buffer, int offset,\n      * field with knowledge which fields are expected to be there.\n      *\n      * <p>All four fields inside the zip64 extended information extra\n-     * field are optional and only present if their corresponding\n+     * field are optional and must only be present if their corresponding\n      * entry inside the central directory contains the correct magic\n      * value.</p>\n      */\n@@ -256,7 +256,7 @@ public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                 + (hasCompressedSize ? DWORD : 0)\n                 + (hasRelativeHeaderOffset ? DWORD : 0)\n                 + (hasDiskStart ? WORD : 0);\n-            if (rawCentralDirectoryData.length != expectedLength) {\n+            if (rawCentralDirectoryData.length < expectedLength) {\n                 throw new ZipException(\"central directory zip64 extended\"\n                                        + \" information extra field's length\"\n                                        + \" doesn't match central directory\""},"core_14":{"link_diff":"https://github.com/FasterXML/jackson-core/compare/383f63242c59628d7bcef15a73eb1c9d44d7fb56..3c2c9610b6c76e2b348eb057d0a8268681d573a6","language":"java","hunk":"diff --git a/src/main/java/com/fasterxml/jackson/core/io/IOContext.java b/src/main/java/com/fasterxml/jackson/core/io/IOContext.java\nindex a4675be20c..18f50c8eda 100644\n--- a/src/main/java/com/fasterxml/jackson/core/io/IOContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/IOContext.java\n@@ -270,12 +270,17 @@ protected final void _verifyAlloc(Object buffer) {\n     }\n \n     protected final void _verifyRelease(byte[] toRelease, byte[] src) {\n-        if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); }\n+        // 07-Mar-2016, tatu: As per [core#255], only prevent shrinking of buffer\n+        if ((toRelease != src) && (toRelease.length < src.length)) { throw wrongBuf(); }\n     }\n \n     protected final void _verifyRelease(char[] toRelease, char[] src) {\n-        if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); }\n+        // 07-Mar-2016, tatu: As per [core#255], only prevent shrinking of buffer\n+        if ((toRelease != src) && (toRelease.length < src.length)) { throw wrongBuf(); }\n     }\n \n-    private IllegalArgumentException wrongBuf() { return new IllegalArgumentException(\"Trying to release buffer not owned by the context\"); }\n+    private IllegalArgumentException wrongBuf() {\n+        // sanity check failed; trying to return different, smaller buffer.\n+        return new IllegalArgumentException(\"Trying to release buffer smaller than original\");\n+    }\n }"},"jackson_core_25":{"link_diff":"https://github.com/FasterXML/jackson-core/compare/3d3dedc656e331ab1a9e28efcde96bf71c347daa..ad47c206f4fbf22f439f3d66871757891f549f6a","language":"java","hunk":"diff --git a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\nindex 2c1f5a2303..f38e4aaedb 100644\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n@@ -1960,7 +1960,7 @@ private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOExc\n             }\n             char c = _inputBuffer[_inputPtr];\n             int i = (int) c;\n-            if (i <= maxCode) {\n+            if (i < maxCode) {\n                 if (codes[i] != 0) {\n                     break;\n                 }"},"jackson_core_5":{"link_diff":"https://github.com/FasterXML/jackson-core/compare/bfdc2852923f671452c66ddf261c87e7e2e5b497..0d9cd9fa434c0070638332b7f2243af0277461eb","language":"java","hunk":"diff --git a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\nindex d353b39279..a80223912a 100644\n--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n@@ -190,7 +190,7 @@ private final static int _parseIndex(String str) {\n             return -1;\n         }\n         for (int i = 0; i < len; ++i) {\n-            char c = str.charAt(i++);\n+            char c = str.charAt(i);\n             if (c > '9' || c < '0') {\n                 return -1;\n             }\n","tree":"arguments: argument_list [192, 31] - [192, 36]\n  update_expression [192, 32] - [192, 35]\n    identifier [192, 32] - [192, 33]\n"},"jackson_databind_27":{"link_diff":"https://github.com/FasterXML/jackson-databind/compare/d485ea7da49ed949c81f23513d01d67e170d2a1b..f2f611e701c63c8e98e59f315641bd2bf2921aea","language":"java","hunk":"diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\nindex d0b6d7e95f..23d989e83d 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n@@ -789,7 +789,9 @@ protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, D\n             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n             if (creatorProp != null) {\n                 // first: let's check to see if this might be part of value with external type id:\n-                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n+                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,\n+                //   since it is not the bean\n+                if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                     ;\n                 } else {\n                     // Last creator property to set?"},"jackson_databind_37":{"link_diff":"https://github.com/FasterXML/jackson-databind/compare/d5e12f74d2224574ef1e220decc514073303ac5c..dbf0c6f4c93d922a2ebb4d744661e7090fef2aac","language":"java","hunk":"diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\nindex bd2ad0049d..1c741ec9fa 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\n@@ -123,7 +123,16 @@ protected JavaType _narrow(Class<?> subclass)\n             return this;\n         }\n         // Should we check that there is a sub-class relationship?\n-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n+        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n+        //    placeholder values, so no.\n+        /*\n+        if (!_class.isAssignableFrom(subclass)) {\n+            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n+                    +_class.getName());\n+        }\n+        */\n+        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n+        return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                 _valueHandler, _typeHandler, _asStatic);\n   }"},"lang_33":{"link_diff":"https://github.com/apache/commons-lang/compare/575be16474e8e8246d4bbde6f243fdf38c34ad5b..0603aef594fa60126c2d45f2ab164eee39f7b44c","language":"java","hunk":"diff --git a/src/main/java/org/apache/commons/lang3/ClassUtils.java b/src/main/java/org/apache/commons/lang3/ClassUtils.java\nindex 85fda048eeb..3998966a750 100644\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n@@ -890,7 +890,8 @@ private static String toCanonicalName(String className) {\n     }\n \n     /**\n-     * <p>Converts an array of <code>Object</code> in to an array of <code>Class</code> objects.</p>\n+     * <p>Converts an array of <code>Object</code> in to an array of <code>Class</code> objects.\n+     * If any of these objects is null, a null element will be inserted into the array.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      *\n@@ -906,7 +907,7 @@ public static Class<?>[] toClass(Object[] array) {\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            classes[i] = array[i].getClass();\n+            classes[i] = array[i] == null ? null : array[i].getClass();\n         }\n         return classes;\n     }"},"lang_59":{"link_diff":"https://github.com/apache/commons-lang/compare/38f8bcc60b90295f0a697f32e760a0082571bc09..c04cd2337786ce7d54ed1fb757192fb8bc8c5e41","language":"java","hunk":"diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 886d424ea02..4c1450995ab 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -881,7 +881,7 @@ public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar)\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buffer, size);\n+                str.getChars(0, width, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n"},"lang_6":{"link_diff":"https://github.com/apache/commons-lang/compare/6823c3742ee16f5b28e550a6afb685553befc0c2..cff0f1ae37bb2b7ab2dcdb10dec1f3cad7532e1c","language":"java","hunk":"diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eafd5d..050046046ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,7 @@ public final void translate(CharSequence input, Writer out) throws IOException {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                pos += Character.charCount(Character.codePointAt(input, pt));\n             }\n         }\n     }"},"mockito_29":{"link_diff":"https://github.com/mockito/mockito/compare/df41fbe00b1300cfe5076bb4e9242214fbe677f9..918f0a5aed6454b307004b6c9c86afc8e96353ff","language":"java","hunk":"diff --git a/src/org/mockito/internal/matchers/Same.java b/src/org/mockito/internal/matchers/Same.java\nindex 7637f7ed16..b8267b9ac8 100644\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n@@ -4,11 +4,11 @@\n  */\n package org.mockito.internal.matchers;\n \n-import java.io.Serializable;\n-\n import org.hamcrest.Description;\n import org.mockito.ArgumentMatcher;\n \n+import java.io.Serializable;\n+\n \n public class Same extends ArgumentMatcher<Object> implements Serializable {\n \n@@ -26,7 +26,7 @@ public boolean matches(Object actual) {\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n-        description.appendText(wanted.toString());\n+        description.appendText(wanted == null ? \"null\" : wanted.toString());\n         appendQuoting(description);\n         description.appendText(\")\");\n     }\n"},"mockito_38":{"link_diff":"https://github.com/mockito/mockito/compare/a663d2fe76bf1ff54bbe59bddcb52f9badec3f2a..c1f2c4e6b5bab4cfc004f22999e11e8ac140d377","language":"java","hunk":"diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 671fbc539b..9d4f834d20 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -45,6 +45,6 @@ private boolean safelyMatches(Matcher m, Object arg) {\n     }\n \n     private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n+        return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n     }\n }"}}
